/*Classe: TelaPrincipal
  Pacote: protototipominop.view
  Funcionalidade: Essa classe representa a tela principal do protótipo. Todas as
  outras telas serão representadas em um painel dentro dela.
  Autor: Leandro Matioli Santos
*/

package protototipominop.view;

import java.awt.Component;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import protototipominop.controller.BaseDeTextoController;

/**
 *
 * @author Leandro
 */
public class TelaPrincipal extends javax.swing.JFrame {

    private Component comp;
    private Process process;
    public static int telaAtual = 0;
    public static BaseDeTextoController baseDeTextoController = new BaseDeTextoController();;

    public static File diretorioModelos = new File("./svm" + System.getProperty("file.separator") + "modelosSvm");
    public static boolean ehProcessoInteiro = false;
    public static boolean telaResultadosAnteriores = false;


    /** Creates new form TelaPrincipal */
    public TelaPrincipal() {
        initComponents();

        this.setTitle("Protótipo - Mineração de Opinião - LMS");

        this.setLocationRelativeTo(null);
        
        btnProximo.setVisible(false);
        btnAnterior.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnProximo = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        painelPrincipal = new javax.swing.JPanel();
        menuBarPrincipal = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        menuItemBaseDeTexto = new javax.swing.JMenuItem();
        menuItemUtilizarModelo = new javax.swing.JMenuItem();
        menuItemConverteJson = new javax.swing.JMenuItem();
        menuItemIdLingua = new javax.swing.JMenuItem();
        menuItemRemoveMsg = new javax.swing.JMenuItem();
        menuItemSair = new javax.swing.JMenuItem();
        menuColeta = new javax.swing.JMenu();
        menuItemIniciarColeta = new javax.swing.JMenuItem();
        menuResultado = new javax.swing.JMenu();
        menuItemResultadosAnteriores = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menuItemDefineBanco = new javax.swing.JMenuItem();
        menuItemSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btnProximo.setText("Próximo >");
        btnProximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProximoActionPerformed(evt);
            }
        });

        btnAnterior.setText("< Anterior");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        painelPrincipal.setLayout(new java.awt.GridLayout(1, 0));

        menuArquivo.setText("Arquivo");

        menuItemBaseDeTexto.setText("Abrir base de texto");
        menuItemBaseDeTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBaseDeTextoActionPerformed(evt);
            }
        });
        menuArquivo.add(menuItemBaseDeTexto);

        menuItemUtilizarModelo.setText("Utilizar modelo previamente treinado");
        menuItemUtilizarModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUtilizarModeloActionPerformed(evt);
            }
        });
        menuArquivo.add(menuItemUtilizarModelo);

        menuItemConverteJson.setText("Converter base de texto JSON");
        menuItemConverteJson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemConverteJsonActionPerformed(evt);
            }
        });
        menuArquivo.add(menuItemConverteJson);

        menuItemIdLingua.setText("Identificar idiomas de um arquivo");
        menuItemIdLingua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemIdLinguaActionPerformed(evt);
            }
        });
        menuArquivo.add(menuItemIdLingua);

        menuItemRemoveMsg.setText("Remover mensagens não relacionadas");
        menuItemRemoveMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRemoveMsgActionPerformed(evt);
            }
        });
        menuArquivo.add(menuItemRemoveMsg);

        menuItemSair.setText("Sair");
        menuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSairActionPerformed(evt);
            }
        });
        menuArquivo.add(menuItemSair);

        menuBarPrincipal.add(menuArquivo);

        menuColeta.setText("Coleta");

        menuItemIniciarColeta.setText("Realizar coleta no Twitter");
        menuItemIniciarColeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemIniciarColetaActionPerformed(evt);
            }
        });
        menuColeta.add(menuItemIniciarColeta);

        menuBarPrincipal.add(menuColeta);

        menuResultado.setText("Resultado");

        menuItemResultadosAnteriores.setText("Ver resultados anteriores");
        menuItemResultadosAnteriores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemResultadosAnterioresActionPerformed(evt);
            }
        });
        menuResultado.add(menuItemResultadosAnteriores);

        menuBarPrincipal.add(menuResultado);

        jMenu1.setText("Opções");

        menuItemDefineBanco.setText("Definir banco de dados");
        menuItemDefineBanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDefineBancoActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemDefineBanco);

        menuItemSobre.setText("Sobre");
        menuItemSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSobreActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemSobre);

        menuBarPrincipal.add(jMenu1);

        setJMenuBar(menuBarPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnProximo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnterior)
                    .addComponent(btnProximo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Metodo para abrir o FileChooser e verificar se o arquivo selecionado contem objetos JSON
    private String[] abreSeletorArquivosVerificaJson(){

        //Vetor contendo o retorno do metodo
        //[0] - caminho do arquivo
        //[1] - boolean indicando se eh JSON
        String [] retorno = new String[2];

        JFileChooser fileChooser = new JFileChooser();

        //Abre a janela para escolha de arquivo
        fileChooser.showOpenDialog(this);

        retorno[0] = fileChooser.getSelectedFile().getAbsolutePath();
        retorno[1] = Boolean.toString(baseDeTextoController.verificaSeEhArquivoJson(retorno[0]));

        return retorno;

    }


    private void menuItemBaseDeTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemBaseDeTextoActionPerformed

        ehProcessoInteiro = true;
        telaResultadosAnteriores = false;

        //Vetor que guarda o caminho do arquivo e se este contem objetos JSON
        String[] caminhoEhJson;

        String caminhoArquivo;
        boolean ehArquivoJson;

        telaAtual = 0;

        //Retira quaisquer botoes que tenham sido colocados como visiveis durante algum processo
        btnProximo.setVisible(false);
        btnAnterior.setVisible(false);

        //Seta o painelPrincipal vazio, como deve ser inicialmente
        painelPrincipal.removeAll();
        painelPrincipal.repaint();
        painelPrincipal.validate();

        caminhoEhJson = abreSeletorArquivosVerificaJson();

        caminhoArquivo = caminhoEhJson[0];
        ehArquivoJson = Boolean.valueOf(caminhoEhJson[1]);

        //Se for arquivo JSON, indica a outra opcao disponivel
        if (ehArquivoJson){
            JOptionPane.showMessageDialog(null, "Por favor, selecione um arquivo texto comum. Caso deseje converter um arquivo JSON, utilize a opção adequada.",
                                          "Erro na operação!", JOptionPane.WARNING_MESSAGE);
        } else {
                
            try {

                //Monta uma base de texto de acordo com o arquivo selecionado
                baseDeTextoController.baseDeTextoModel = baseDeTextoController.inserirBaseDeTextoUnicoArquivo(caminhoArquivo);

            } catch (IOException ex) {
                System.out.println(ex);
            }

            //Teste do arquivo
            System.out.println(baseDeTextoController.baseDeTextoModel.getCaminhoAbsoluto());
            System.out.println(baseDeTextoController.baseDeTextoModel.getQtdTextos());

            //Trecho que instancia a TelaIdioma no painel principal
            painelPrincipal.removeAll();

            comp = painelPrincipal.add(new TelaIdioma());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(false);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(false);
            //Fim trecho

        }


    }//GEN-LAST:event_menuItemBaseDeTextoActionPerformed

    private void btnProximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProximoActionPerformed

        
        telaAtual = telaAtual+1;

        if(telaAtual == 0){

            //Trecho que instancia a TelaIdioma no painel principal
            painelPrincipal.removeAll();

            comp = painelPrincipal.add(new TelaIdioma());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(false);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata a tela de remocoes de palavra
        } else if(telaAtual == 1){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaRemocoes());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);


            /*
              Nao pode voltar à tela anterior pois seta-se a baseDeTextoModel com
              o novo arquivo gerado da lingua selecionada. O processo atuaria nesse arquivo,
              que nao possui o seu respectivo IDLINGUA (por ser um já filtrado). Em suma,
              nao estariamos lidando com o arquivo original, contendo todas as linguas, mas sim o filtrado.
            */
            //btnAnterior.setVisible(true);
            btnAnterior.setVisible(false);
                        
            btnProximo.setEnabled(false);

            //Se for a opcao de utilizar modelo previamente treinado, deve-se pular para
            // a tela de classificacao
            if(!ehProcessoInteiro){
                telaAtual = 7;
            }

        //Trata a tela de especificar quantidade de textos para treino e teste
        } else if (telaAtual == 2){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaQuantidadeTextos());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata a tela para definir o tipo de classificacao realizada
        } else if (telaAtual == 3){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaDescreveClassificacao());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata a tela para treinamento manual das mensagens
        } else if (telaAtual == 4){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaTreinamento());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnProximo.setEnabled(false);


        //Trata tela para saida do treinamento svm
        } else if (telaAtual == 5){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaSaidaTreinamento());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnProximo.setEnabled(true);

        //Trata tela para teste manual das mensagens
        } else if (telaAtual == 6){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaTeste());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata tela para decidir validade do treinamento
        } else if (telaAtual == 7){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaDecideValidadeTreino());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata a tela para mostrar a saida do SVM apos classificacao
        } else if (telaAtual == 8){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaSaidaClassificacao());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata a tela para mostrar o resultado da classificacao
        } else if (telaAtual == 9){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaResultado());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnProximo.setEnabled(false);

        //Sera a tela para mostrar o grafico comparativo, caso esta seja implementada futuramente
        } else if (telaAtual == 10){



        //Trata a tela de realizacao de coleta
        } else if (telaAtual == 11){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaColeta());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(false);
            btnProximo.setVisible(false);

            String arquivoTracking = "";

            //Caso nao se especifique o arquivo tracking para coleta, utiliza-se o padrao
            if(!TelaDefineColeta.tfArquivoTracking.getText().isEmpty()){
                arquivoTracking = TelaDefineColeta.tfArquivoTracking.getText();
            } else {
                arquivoTracking = "./tracking";
            }

            TelaPrincipal.baseDeTextoController.realizaColeta(arquivoTracking,
                                                              TelaDefineColeta.tfNomeUsuario.getText(),
                                                              TelaDefineColeta.pfSenha.getText(),
                                                              TelaDefineColeta.tfArquivoSaida.getText());


        //Trata a tela para apenas calculo do Tf-Idf, sem realizacao de treinamento e teste
        } else if (telaAtual == 12){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaGeraTfIdf());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(false);
            btnProximo.setVisible(false);

        }
        
    }//GEN-LAST:event_btnProximoActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed

        telaAtual = telaAtual - 1;

        //Trata a tela de conversao de idiomas
        if(telaAtual == 0){

            painelPrincipal.removeAll();

            comp = painelPrincipal.add(new TelaIdioma());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(false);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata a tela de remocoes de palavras
        } else if (telaAtual == 1){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaRemocoes());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);
            
            /*
              Nao pode voltar à tela anterior pois seta-se a baseDeTextoModel com
              o novo arquivo gerada da lingua selecionada. O processo atuaria nesse arquivo,
              que nao possui o seu respectivo IDLINGUA. Em suma, nao estariamos lidando
              com o arquivo original, contendo todas as linguas, mas sim o filtrado.
            */
            //btnAnterior.setVisible(true);
            //btnAnterior.setEnabled(true);
            btnAnterior.setVisible(false);
            
            btnProximo.setVisible(true);
            btnProximo.setEnabled(true);

        //Trata a tela de especificar quantidade de textos para treino e teste
        } else if (telaAtual == 2){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaQuantidadeTextos());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnAnterior.setEnabled(true);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata a tela para definir o tipo de classificacao realizada
        } else if (telaAtual == 3){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaDescreveClassificacao());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnAnterior.setEnabled(true);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata a tela para treinamento manual das mensagens
        } else if (telaAtual == 4){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaTreinamento());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnAnterior.setEnabled(true);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata tela para saida do treinamento svm
        } else if (telaAtual == 5){
            
            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaSaidaTreinamento());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnAnterior.setEnabled(true);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(false);

        //Trata tela para teste manual das mensagens
        } else if (telaAtual == 6){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaTeste());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnAnterior.setEnabled(true);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(false);
 
        //Trata tela para decidir validade do treinamento
        } else if (telaAtual == 7){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaDecideValidadeTreino());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnAnterior.setEnabled(true);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(false);


        //Trata a tela para mostrar a saida do SVM apos classificacao
        } else if (telaAtual == 8){

            painelPrincipal.remove(comp);

            comp = painelPrincipal.add(new TelaSaidaClassificacao());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(true);
            btnAnterior.setEnabled(true);
            btnProximo.setVisible(true);
            btnProximo.setEnabled(true);

            TelaSaidaClassificacao.btnConfirmaClassificacao.doClick();


        }

    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void menuItemConverteJsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemConverteJsonActionPerformed

        //Vetor que guarda o caminho do arquivo e se este contem objetos JSON
        String[] caminhoEhJson;

        String caminhoArquivo;
        boolean ehArquivoJson;

        //Retira quaisquer botoes que tenham sido colocados como visiveis durante algum processo
        btnProximo.setVisible(false);
        btnAnterior.setVisible(false);

        //Seta o painelPrincipal vazio, como deve ser inicialmente
        painelPrincipal.removeAll();
        painelPrincipal.repaint();
        painelPrincipal.validate();

        //Instancia um novo BaseDeTextoController
        baseDeTextoController = new BaseDeTextoController();

        caminhoEhJson = abreSeletorArquivosVerificaJson();

        caminhoArquivo = caminhoEhJson[0];
        ehArquivoJson = Boolean.valueOf(caminhoEhJson[1]);

        //Se não for arquivo JSON, indica a outra opcao disponivel
        if (!ehArquivoJson){
            JOptionPane.showMessageDialog(null, "Por favor, selecione um arquivo contendo objetos JSON. Caso a base esteja em texto puro, selecione a opção 'Abrir base de texto'.",
                                          "Erro na operação!", JOptionPane.WARNING_MESSAGE);
        } else {

            try {

                //Monta uma base de texto de acordo com o arquivo selecionado
                baseDeTextoController.baseDeTextoModel = baseDeTextoController.inserirBaseDeTextoUnicoArquivo(caminhoArquivo);

            } catch (IOException ex) {
                System.out.println(ex);
            }

            //Trecho que instancia a TelaConverteJson no painel principal
            comp = painelPrincipal.add(new TelaConverteJson());
            comp.repaint();
            comp.validate();
            comp.setVisible(true);

            painelPrincipal.repaint();
            painelPrincipal.validate();
            painelPrincipal.setVisible(true);

            btnAnterior.setVisible(false);
            btnProximo.setVisible(false);
            //Fim trecho

            
            
        }

    }//GEN-LAST:event_menuItemConverteJsonActionPerformed

    private void menuItemUtilizarModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUtilizarModeloActionPerformed

        ehProcessoInteiro = false;
        telaResultadosAnteriores = false;

        //Trecho que instancia a TelaIdioma no painel principal
        painelPrincipal.removeAll();

        comp = painelPrincipal.add(new TelaUtilizaModeloExistente());
        comp.repaint();
        comp.validate();
        comp.setVisible(true);

        painelPrincipal.repaint();
        painelPrincipal.validate();
        painelPrincipal.setVisible(true);

        btnAnterior.setVisible(false);
        btnAnterior.setEnabled(false);
        btnProximo.setVisible(false);
        btnProximo.setEnabled(false);
        //Fim trecho


    }//GEN-LAST:event_menuItemUtilizarModeloActionPerformed

    private void menuItemIniciarColetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemIniciarColetaActionPerformed

        //Trecho que instancia a TelaDefineColeta no painel principal
        painelPrincipal.removeAll();

        comp = painelPrincipal.add(new TelaDefineColeta());
        comp.repaint();
        comp.validate();
        comp.setVisible(true);

        painelPrincipal.repaint();
        painelPrincipal.validate();
        painelPrincipal.setVisible(true);

        btnAnterior.setVisible(false);
        btnProximo.setVisible(false);
        //Fim trecho

        telaAtual = 10;


    }//GEN-LAST:event_menuItemIniciarColetaActionPerformed

    private void menuItemIdLinguaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemIdLinguaActionPerformed


        //Trecho que instancia a TelaIdentificaLingua no painel principal
        painelPrincipal.removeAll();

        comp = painelPrincipal.add(new TelaIdentificaLingua());
        comp.repaint();
        comp.validate();
        comp.setVisible(true);

        painelPrincipal.repaint();
        painelPrincipal.validate();
        painelPrincipal.setVisible(true);

        btnAnterior.setVisible(false);
        btnProximo.setVisible(false);
        //Fim trecho



}//GEN-LAST:event_menuItemIdLinguaActionPerformed

    private void menuItemResultadosAnterioresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemResultadosAnterioresActionPerformed

        telaResultadosAnteriores = true;

        //Trecho que instancia a TelaResultadosAnteriores no painel principal
        painelPrincipal.removeAll();

        comp = painelPrincipal.add(new TelaResultadosAnteriores());
        comp.repaint();
        comp.validate();
        comp.setVisible(true);

        painelPrincipal.repaint();
        painelPrincipal.validate();
        painelPrincipal.setVisible(true);

        btnAnterior.setVisible(false);
        btnProximo.setVisible(false);
        //Fim trecho

}//GEN-LAST:event_menuItemResultadosAnterioresActionPerformed

    private void menuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSairActionPerformed

        this.dispose();

    }//GEN-LAST:event_menuItemSairActionPerformed

    private void menuItemRemoveMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRemoveMsgActionPerformed

        //Trecho que instancia a TelaRemoveMsgIndesejadas no painel principal
        painelPrincipal.removeAll();

        comp = painelPrincipal.add(new TelaRemoveMsgIndesejadas());
        comp.repaint();
        comp.validate();
        comp.setVisible(true);

        painelPrincipal.repaint();
        painelPrincipal.validate();
        painelPrincipal.setVisible(true);

        btnAnterior.setVisible(false);
        btnProximo.setVisible(false);
        //Fim trecho

}//GEN-LAST:event_menuItemRemoveMsgActionPerformed

    private void menuItemDefineBancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDefineBancoActionPerformed

        //Trecho que instancia a TelaDefineBanco no painel principal
        painelPrincipal.removeAll();

        comp = painelPrincipal.add(new TelaDefineBanco());
        comp.repaint();
        comp.validate();
        comp.setVisible(true);

        painelPrincipal.repaint();
        painelPrincipal.validate();
        painelPrincipal.setVisible(true);

        btnAnterior.setVisible(false);
        btnProximo.setVisible(false);
        //Fim trecho


}//GEN-LAST:event_menuItemDefineBancoActionPerformed

    private void menuItemSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSobreActionPerformed

        JOptionPane.showMessageDialog(null, "Protótipo implementado como parte das exigências do curso de \n" +
                                            "Ciência da Computação para obtenção do título de Bacharel em \n" +
                                            "Ciência da Computação. \n\n" +
                                            "Desenvolvido por: Leandro Matioli Santos \n" +
                                            "Orientador: Ahmed Ali Abdalla Esmin", "Sobre", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_menuItemSobreActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnAnterior;
    public static javax.swing.JButton btnProximo;
    private javax.swing.JMenu jMenu1;
    public static javax.swing.JMenu menuArquivo;
    public static javax.swing.JMenuBar menuBarPrincipal;
    public static javax.swing.JMenu menuColeta;
    private javax.swing.JMenuItem menuItemBaseDeTexto;
    private javax.swing.JMenuItem menuItemConverteJson;
    private javax.swing.JMenuItem menuItemDefineBanco;
    private javax.swing.JMenuItem menuItemIdLingua;
    private javax.swing.JMenuItem menuItemIniciarColeta;
    private javax.swing.JMenuItem menuItemRemoveMsg;
    private javax.swing.JMenuItem menuItemResultadosAnteriores;
    private javax.swing.JMenuItem menuItemSair;
    private javax.swing.JMenuItem menuItemSobre;
    private javax.swing.JMenuItem menuItemUtilizarModelo;
    public static javax.swing.JMenu menuResultado;
    public static javax.swing.JPanel painelPrincipal;
    // End of variables declaration//GEN-END:variables

}
